@using Syncfusion.EJ2


<style>
    .e-toolbar .e-toolbar-items {
        min-height: 34px;
    }

        .e-toolbar .e-toolbar-items .e-toolbar-item {
            vertical-align: middle;
        }

    .e-icons.e-emoji:before {
        content: "\e8c8";
    }

    <style >
    #customTbarDialog #special_char,
    #customTbarDialog .char_block {
        display: inline-block;
    }

    #custom_tbar,
    #custom_tbar div {
        cursor: pointer;
    }

    #rteSpecial_char {
        padding: 15px 0 15px 0;
    }

    #customTbarDialog .char_block.e-active {
        outline: 1px solid #e3165b;
        border-color: #e3165b;
    }

    .material #customTbarDialog .char_block.e-active {
        outline: 1px solid #e3165b;
        border-color: #e3165b;
    }

    .material-dark #customTbarDialog .char_block.e-active {
        outline: 1px solid #56a4fd;
        border-color: #56a4fd;
    }

    .fabric #customTbarDialog .char_block.e-active,
    .fabric-dark #customTbarDialog .char_block.e-active {
        outline: 1px solid #0078d6;
        border-color: #0078d6;
    }

    .bootstrap4 #customTbarDialog .char_block.e-active {
        outline: 1px solid #007bff;
        border-color: #007bff;
    }

    .bootstrap #customTbarDialog .char_block.e-active,
    .bootstrap-dark #customTbarDialog .char_block.e-active {
        outline: 1px solid #317ab9;
        border-color: #317ab9;
    }

    .highcontrast #customTbarDialog .char_block.e-active {
        outline: 1px solid #ffd939;
        border-color: #ffd939;
    }

    .tailwind #customTbarDialog .char_block.e-active {
        outline: 1px solid #3730a3;
        border-color: #3730a3;
    }

    .tailwind-dark #customTbarDialog .char_block.e-active {
        outline: 1px solid #22d3ee;
        border-color: #22d3ee;
    }

    .bootstrap5 #customTbarDialog .char_block.e-active,
    .bootstrap5-dark #customTbarDialog .char_block.e-active {
        outline: 1px solid #0D6EFD;
        border-color: #0D6EFD;
    }

    .bootstrap5 #customTbarDialog .char_block.e-active {
        outline: 1px solid #0D6EFD;
        border-color: #0D6EFD;
    }

    .fluent #customTbarDialog .char_block.e-active,
    .fluent-dark #customTbarDialog .char_block.e-active {
        outline: 1px solid #0078DE;
        border-color: #0078DE;
    }

    .material3 .e-rte-custom-tbar-section .char_block.e-active,
    .material3-dark .e-rte-custom-tbar-section .char_block.e-active {
        outline: 1px solid #7D69B1;
        border-color: #7D69B1;
    }

    #customTbarDialog .char_block {
        width: 30px;
        height: 30px;
        line-height: 30px;
        margin: 0 5px 5px 0;
        text-align: center;
        vertical-align: middle;
        border: 1px solid #DDDDDD;
        font-size: 20px;
        cursor: pointer;
        user-select: none;
    }

    #custom_tbar .rtecustomtool {
        font-size: 18px;
    }

    @@media (min-width: 320px) and (max-width: 480px) {
        #rteSpecial_char {
            padding: 15px 0 15px 0;
        }
    }
</style>



<div class="row">
    <div class="col-8">
        <ejs-richtexteditor id="defaultRTE" toolbarClick="onToolbarClick" showCharCount="true" actionBegin="handleFullScreen" actionComplete="actionCompleteHandler" maxLength="2000" created="created" enableTabKey="true">
            <e-content-template>

            </e-content-template>
            <e-richtexteditor-pastecleanupsettings Prompt="true"></e-richtexteditor-pastecleanupsettings>
            <e-richtexteditor-toolbarsettings type="MultiRow" items="@ViewBag.items"></e-richtexteditor-toolbarsettings>
            <e-richtexteditor-quicktoolbarsettings table="@ViewBag.table" showOnRightClick="true"></e-richtexteditor-quicktoolbarsettings>
        </ejs-richtexteditor>
    </div>
    <div class="col-4">
        <ejs-grid id="grid-metadata-rt" dataSource="ViewBag.listMetaData" beforeCopy="beforeCopy" allowGrouping="false" allowFiltering="true" allowPaging="true" contextMenuItems="@(new List<object>() {"Copy"})">
            @* <e-grid-pagesettings pageCount="@ViewBag.PageCount"></e-grid-pagesettings>*@
            <e-grid-selectionsettings type="Single" mode="Both"></e-grid-selectionsettings>
            <e-grid-columns>
                <e-grid-column field="MetaData" isPrimaryKey="true" headerText="MetaData Name"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>
</div>
<ejs-dialog id="customTbarDialog" visible="false" header='Special Characters' created="onDialogCreate" zIndex="1000" showCloseIcon="false" isModal="true" overlayClick="dialogOverlay">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="ViewBag.insertBtn" click="onInsert"></e-dialog-dialogbutton>
        <e-dialog-dialogbutton buttonModel="ViewBag.cancelBtn" click="dialogOverlay"></e-dialog-dialogbutton>
    </e-dialog-buttons>
    <e-content-template>
        <div id="rteSpecial_char">
            <div class="char_block" title="^">^</div>
            <div class="char_block" title="_">_</div>
            <div class="char_block" title="`">`</div>
            <div class="char_block" title="{">{</div>
            <div class="char_block" title="|">|</div>
            <div class="char_block" title="}">}</div>
            <div class="char_block" title="~">~</div>
            <div class="char_block" title="&nbsp;">&nbsp;</div>
            <div class="char_block" title="¡">¡</div>
            <div class="char_block" title="¢">¢</div>
            <div class="char_block" title="£">£</div>
            <div class="char_block" title="¤">¤</div>
            <div class="char_block" title="¥">¥</div>
            <div class="char_block" title="₹">₹</div>
            <div class="char_block" title="¦">¦</div>
            <div class="char_block" title="§">§</div>
            <div class="char_block" title="¨">¨</div>
            <div class="char_block" title="©">©</div>
            <div class="char_block" title="ª">ª</div>
            <div class="char_block" title="«">«</div>
            <div class="char_block" title="¬">¬</div>
            <div class="char_block" title="­-">-­</div>
            <div class="char_block" title="®">®</div>
            <div class="char_block" title="¯">¯</div>
            <div class="char_block" title="°">°</div>
            <div class="char_block" title="±">±</div>
            <div class="char_block" title="²">²</div>
            <div class="char_block" title="³">³</div>
            <div class="char_block" title="´">´</div>
            <div class="char_block" title="µ">µ</div>
            <div class="char_block" title="¶">¶</div>
            <div class="char_block" title="·">·</div>
            <div class="char_block" title="¸">¸</div>
            <div class="char_block" title="¹">¹</div>
            <div class="char_block" title="º">º</div>
            <div class="char_block" title="»">»</div>
            <div class="char_block" title="¼">¼</div>
            <div class="char_block" title="½">½</div>
            <div class="char_block" title="¾">¾</div>
            <div class="char_block" title="¿">¿</div>
            <div class="char_block" title="À">À</div>
            <div class="char_block" title="Á">Á</div>
            <div class="char_block" title="Â">Â</div>
            <div class="char_block" title="Ã">Ã</div>
        </div>
    </e-content-template>
</ejs-dialog>
<div id="toast_copy_content" >
</div>

<button type="button" class="btn btn-primary" onclick="ShowContent()">show Data</button>

@* 
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script> *@

<script type="text/javascript">

    function ShowContent() {
        var templateBody = document.getElementById("defaultRTE").ej2_instances[0];

        console.log(templateBody.value);
    }

    function onToolbarClick(e) {
        if (e.item.tooltipText==="Select All") {
            this.selectAll();
        }
        else if (e.item.tooltipText === "Insert Symbol") {
            dialogObj.element.style.display = '';
            ranges = selection.getRange(document);
            saveSelection = selection.save(ranges, document);
            dialogObj.width = rteObj.element.offsetWidth * 0.5;
            dialogObj.show();

            var dialogCtn = document.getElementById('rteSpecial_char');
            dialogCtn.onclick = function (e) {
                var target = e.target;
                var activeEle = dialogObj.element.querySelector('.char_block.e-active');
                if (target.classList.contains('char_block')) {
                    target.classList.add('e-active');
                    if (activeEle) {
                        activeEle.classList.remove('e-active');
                    }
                }
            };
        }
    }
    function beforeCopy(a) {
        a.data = `##${a.data}##`;
        //Initialize Toast component
        var toast = new ej.notifications.Toast({
            content: 'Copied;',
            target: document.body,
            position: { X: 'Right' },
            timeOut: 2000
        });

        //Render initialized Toast component
        toast.appendTo('#toast_copy_content');
        toast.show();
    }

    var rteObj, selection, ranges, dialogObj, saveSelection;
    function onDialogCreate() {
        dialogObj = this;
        dialogObj.element.style.maxHeight = '300px';
    }  
   
    function onInsert() {
        var activeEle = dialogObj.element.querySelector('.char_block.e-active');
        if (rteObj.formatter.getUndoRedoStack().length === 0) {
            rteObj.formatter.saveData();
        }
        saveSelection.restore();
        rteObj.executeCommand('insertText', activeEle.textContent);
        rteObj.formatter.saveData();
        rteObj.formatter.enableUndo(rteObj);
        dialogOverlay();
    }
    function dialogOverlay() {
        var activeEle = dialogObj.element.querySelector('.char_block.e-active');
        if (activeEle) {
            activeEle.classList.remove('e-active');
        }
        dialogObj.hide();
    }
    function actionCompleteHandler(e) {
        // if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {
        //     this.sourceCodeModule.getPanel().style.display = 'none';
        //     mirrorConversion(e);
        // }
        // else {
        //     setTimeout(function () { rteObj.toolbarModule.refreshToolbarOverflow(); }, 1000);
        // }
        if (e.requestType === 'SourceCode') {
            rteObj.getToolbar().querySelector('#custom_tbar').parentElement.classList.add('e-overlay');
        } else if (e.requestType === 'Preview') {
            rteObj.getToolbar().querySelector('#custom_tbar').parentElement.classList.remove('e-overlay');
        }
    };
    function created() {
        rteObj = this;
        textArea = rteObj.contentModule.getEditPanel();

        selection = new ej.richtexteditor.NodeSelection();
        var customBtn = rteObj.element.querySelector('#custom_tbar');
        // customBtn.onclick = function (e) {
        //     dialogObj.element.style.display = '';
        //     ranges = selection.getRange(document);
        //     saveSelection = selection.save(ranges, document);
        //     dialogObj.width = rteObj.element.offsetWidth * 0.5;
        //     dialogObj.show();
        //     customBtn.onclick = function (e) {
        //         rteObj.focusIn();
        //         dialogObj.element.style.display = '';
        //         ranges = selection.getRange(document);
        //         saveSelection = selection.save(ranges, document);
        //         dialogObj.width = rteObj.element.offsetWidth * 0.5;
        //         dialogObj.show();
        //     };
        // };
    }

    function handleFullScreen(e) {
        var sbCntEle = document.querySelector('.sb-content.e-view');
        var sbHdrEle = document.querySelector('.sb-header.e-view');
        if (e.targetItem === 'Maximize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.addClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
        else if (e.targetItem === 'Minimize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.removeClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
    }
</script>